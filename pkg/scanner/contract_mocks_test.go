// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package scanner is a generated GoMock package.
package scanner

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofeed "github.com/mmcdole/gofeed"
	models "github.com/temathc/news-aggregator/models"
)

// MockpublicationsRepository is a mock of publicationsRepository interface.
type MockpublicationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpublicationsRepositoryMockRecorder
}

// MockpublicationsRepositoryMockRecorder is the mock recorder for MockpublicationsRepository.
type MockpublicationsRepositoryMockRecorder struct {
	mock *MockpublicationsRepository
}

// NewMockpublicationsRepository creates a new mock instance.
func NewMockpublicationsRepository(ctrl *gomock.Controller) *MockpublicationsRepository {
	mock := &MockpublicationsRepository{ctrl: ctrl}
	mock.recorder = &MockpublicationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpublicationsRepository) EXPECT() *MockpublicationsRepositoryMockRecorder {
	return m.recorder
}

// AddPublications mocks base method.
func (m *MockpublicationsRepository) AddPublications(arg0 []models.Publications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublications", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublications indicates an expected call of AddPublications.
func (mr *MockpublicationsRepositoryMockRecorder) AddPublications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublications", reflect.TypeOf((*MockpublicationsRepository)(nil).AddPublications), arg0)
}

// Mockparser is a mock of parser interface.
type Mockparser struct {
	ctrl     *gomock.Controller
	recorder *MockparserMockRecorder
}

// MockparserMockRecorder is the mock recorder for Mockparser.
type MockparserMockRecorder struct {
	mock *Mockparser
}

// NewMockparser creates a new mock instance.
func NewMockparser(ctrl *gomock.Controller) *Mockparser {
	mock := &Mockparser{ctrl: ctrl}
	mock.recorder = &MockparserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockparser) EXPECT() *MockparserMockRecorder {
	return m.recorder
}

// ParseURL mocks base method.
func (m *Mockparser) ParseURL(feedURL string) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURL", feedURL)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURL indicates an expected call of ParseURL.
func (mr *MockparserMockRecorder) ParseURL(feedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURL", reflect.TypeOf((*Mockparser)(nil).ParseURL), feedURL)
}
