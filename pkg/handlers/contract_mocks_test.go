// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/temathc/news-aggregator/models"
)

// MockpublicationsRepository is a mock of publicationsRepository interface.
type MockpublicationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpublicationsRepositoryMockRecorder
}

// MockpublicationsRepositoryMockRecorder is the mock recorder for MockpublicationsRepository.
type MockpublicationsRepositoryMockRecorder struct {
	mock *MockpublicationsRepository
}

// NewMockpublicationsRepository creates a new mock instance.
func NewMockpublicationsRepository(ctrl *gomock.Controller) *MockpublicationsRepository {
	mock := &MockpublicationsRepository{ctrl: ctrl}
	mock.recorder = &MockpublicationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpublicationsRepository) EXPECT() *MockpublicationsRepositoryMockRecorder {
	return m.recorder
}

// GetPublicationsWithLimit mocks base method.
func (m *MockpublicationsRepository) GetPublicationsWithLimit(arg0 int) ([]models.Publications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicationsWithLimit", arg0)
	ret0, _ := ret[0].([]models.Publications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicationsWithLimit indicates an expected call of GetPublicationsWithLimit.
func (mr *MockpublicationsRepositoryMockRecorder) GetPublicationsWithLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicationsWithLimit", reflect.TypeOf((*MockpublicationsRepository)(nil).GetPublicationsWithLimit), arg0)
}
